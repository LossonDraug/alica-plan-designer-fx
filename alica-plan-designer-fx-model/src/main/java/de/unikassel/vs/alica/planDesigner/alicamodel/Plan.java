package de.unikassel.vs.alica.planDesigner.alicamodel;

import javafx.beans.property.*;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Plan extends AbstractPlan {

    protected final SimpleBooleanProperty masterPlan = new SimpleBooleanProperty();
    protected final SimpleDoubleProperty utilityThreshold = new SimpleDoubleProperty();

    // TODO: probably need to make this conditions a simpleObjectProperty or something similar custom...
    protected PreCondition preCondition;
    protected RuntimeCondition runtimeCondition;
    protected final ArrayList<EntryPoint> entryPoints = new ArrayList<>();
    protected final ArrayList<State> states = new ArrayList<>();
    protected final ArrayList<Transition> transitions = new ArrayList<>();
    protected final ArrayList<Synchronization> synchronizations = new ArrayList<>();
    protected final ArrayList<Variable> variables= new ArrayList<>();

    /**
     * Need to be explicitly written, because the constructor Plan(long id)
     * makes the autogenerated version of this one vanishing.
     */
    public Plan() {
        super();
    }

    /**
     * Constructor for representing incomplete Plan References while parsing files.
     * @param id The ID found in the file, while parsing the reference.
     */
    public Plan(long id) {
        this();
        this.id = id ;
    }

    public double getUtilityThreshold() {
        return utilityThreshold.get();
    }
    public void setUtilityThreshold(double utilityThreshold) {
        this.utilityThreshold.set(utilityThreshold);
    }
    public SimpleDoubleProperty utilityThreshold() {
        return utilityThreshold;
    }

    public boolean getMasterPlan() {
        return masterPlan.get();
    }
    public void setMasterPlan(boolean masterPlan) {
        this.masterPlan.set(masterPlan);
    }
    public SimpleBooleanProperty masterPlanProperty() {
        return masterPlan;
    }

    public PreCondition getPreCondition() {
        return preCondition;
    }
    public void setPreCondition(PreCondition preCondition) {
        this.preCondition = preCondition;
    }

    public RuntimeCondition getRuntimeCondition() {
        return runtimeCondition;
    }
    public void setRuntimeCondition(RuntimeCondition runtimeCondition) {
        this.runtimeCondition = runtimeCondition;
    }

    public void addTransition(Transition transition) {
        transitions.add(transition);
        this.setDirty(true);
    }
    public void removeTransition(Transition transition) {
        transitions.remove(transition);
        this.setDirty(true);
    }
    public List<Transition> getTransitions() {
        return Collections.unmodifiableList(transitions);
    }

    public void addState(State state) {
        states.add(state);
        this.setDirty(true);
    }
    public void removeState(State state) {
        states.remove(state);
        this.setDirty(true);
    }
    public List<State> getStates() {
        return Collections.unmodifiableList(states);
    }

    public void addSynchronization(Synchronization synchronization) {
        synchronizations.add(synchronization);
        this.setDirty(true);
    }
    public void removeSynchronization(Synchronization synchronization) {
        synchronizations.remove(synchronization);
        this.setDirty(true);
    }
    public List<Synchronization> getSynchronizations() {
        return Collections.unmodifiableList(synchronizations);
    }

    public void addEntryPoint(EntryPoint entryPoint) {
        entryPoints.add(entryPoint);
        this.setDirty(true);
    }
    public void removeEntryPoint(EntryPoint entryPoint) {
        entryPoints.remove(entryPoint);
        this.setDirty(true);
    }
    public List<EntryPoint> getEntryPoints() {
        return Collections.unmodifiableList(entryPoints);
    }

    public void addVariable(Variable variable) {
        variables.add(variable);
        this.setDirty(true);
    }
    public void removeVariable(Variable variable) {
        variables.remove(variable);
        this.setDirty(true);
    }
    public List<Variable> getVariables() {
        return Collections.unmodifiableList(variables);
    }

    public void registerDirtyFlag() {
        super.registerDirtyFlag();
        masterPlan.addListener((observable, oldValue, newValue) -> {
            this.setDirty(true);
        });

        utilityThreshold.addListener((observable, oldValue, newValue) -> {
            this.setDirty(true);
        });
        this.setDirty(false);
    }
}

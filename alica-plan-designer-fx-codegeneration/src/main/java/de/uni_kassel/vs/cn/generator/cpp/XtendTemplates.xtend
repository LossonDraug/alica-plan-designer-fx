package de.uni_kassel.vs.cn.generator.cpp

import de.uni_kassel.vs.cn.planDesigner.alica.Behaviour
import java.util.List
import de.uni_kassel.vs.cn.planDesigner.alica.Plan

/**
 * Created by marci on 11.05.17.
 */
class XtendTemplates {

    def String BehaviourCreatorFile(List<Behaviour> behaviours)'''
using namespace std;

#include "BehaviourCreator.h"
#include "engine/BasicBehaviour.h"
«FOR beh : behaviours»
#include  "«beh.destinationPath»/«beh.name».h"
«ENDFOR»
namespace alica
{

    BehaviourCreator::BehaviourCreator()
    {
    }

    BehaviourCreator::~BehaviourCreator()
    {
    }

    shared_ptr<BasicBehaviour> BehaviourCreator::createBehaviour(long behaviourConfId)
    {
        switch(behaviourConfId)
        {
            «FOR beh : behaviours»
                case «beh.id»
                // TODO something for behaviour configurations has to be done here
                return make_shared<«beh.name»>();
                break;
            «ENDFOR»
            default:
            cerr << "BehaviourCreator: Unknown behaviour requested: " << behaviourConfId << endl;
            throw new exception();
            break;
        }
    }
}
'''

    def String utilityFunctionCreatorHeader()'''
#ifndef UTILITYFUNCTIONCREATOR_H_
#define UTILITYFUNCTIONCREATOR_H_

#include <engine/IUtilityCreator.h>
#include <memory>

namespace alica
{

    class UtilityFunctionCreator : public IUtilityCreator
    {
        public:
        virtual ~UtilityFunctionCreator();
        UtilityFunctionCreator();
        shared_ptr<BasicUtilityFunction> createUtility(long utilityfunctionConfId);
    };

} /* namespace alica */

#endif /* UTILITYFUNCTIONCREATOR_H_ */
'''


    def String utilityFunctionCreatorSource(List<Plan> plans)'''
#include <iostream>
#include "UtilityFunctionCreator.h"
«FOR p : plans»
#include  "«p.destinationPath»/«p.name»«p.id».h"
«ENDFOR»
using namespace std;
using namespace alicaAutogenerated;
namespace alica
{

    UtilityFunctionCreator::~UtilityFunctionCreator()
    {
    }

    UtilityFunctionCreator::UtilityFunctionCreator()
    {
    }


    shared_ptr<BasicUtilityFunction> UtilityFunctionCreator::createUtility(long utilityfunctionConfId)
    {
        switch(utilityfunctionConfId)
        {
            «FOR p : plans»
            case «p.id»:
                return make_shared<UtilityFunction«p.id»>();
                break;
            «ENDFOR»
            default:
            cerr << "UtilityFunctionCreator: Unknown utility requested: " << utilityfunctionConfId << endl;
            throw new exception();
            break;
        }
    }


}
'''
}
